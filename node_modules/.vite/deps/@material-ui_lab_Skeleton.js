import "./chunk-Q3M42CHF.js";
import {
  _objectWithoutProperties,
  alpha,
  clsx_m_default,
  init_clsx_m,
  init_objectWithoutProperties,
  withStyles_default
} from "./chunk-TDSZZKD6.js";
import "./chunk-RLN447QV.js";
import "./chunk-O3D3YOBV.js";
import {
  _extends,
  init_extends
} from "./chunk-PWHIIXOD.js";
import {
  require_prop_types
} from "./chunk-ASGZJBXS.js";
import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/@material-ui/lab/esm/Skeleton/Skeleton.js
init_extends();
init_objectWithoutProperties();
var React = __toESM(require_react());
init_clsx_m();
var import_prop_types = __toESM(require_prop_types());
var styles = function styles2(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "block",
      // Create a "on paper" color with sufficient contrast retaining the color
      backgroundColor: alpha(theme.palette.text.primary, theme.palette.type === "light" ? 0.11 : 0.13),
      height: "1.2em"
    },
    /* Styles applied to the root element if `variant="text"`. */
    text: {
      marginTop: 0,
      marginBottom: 0,
      height: "auto",
      transformOrigin: "0 60%",
      transform: "scale(1, 0.60)",
      borderRadius: theme.shape.borderRadius,
      "&:empty:before": {
        content: '"\\00a0"'
      }
    },
    /* Styles applied to the root element if `variant="rect"`. */
    rect: {},
    /* Styles applied to the root element if `variant="circle"`. */
    circle: {
      borderRadius: "50%"
    },
    /* Styles applied to the root element if `animation="pulse"`. */
    pulse: {
      animation: "$pulse 1.5s ease-in-out 0.5s infinite"
    },
    "@keyframes pulse": {
      "0%": {
        opacity: 1
      },
      "50%": {
        opacity: 0.4
      },
      "100%": {
        opacity: 1
      }
    },
    /* Styles applied to the root element if `animation="wave"`. */
    wave: {
      position: "relative",
      overflow: "hidden",
      "&::after": {
        animation: "$wave 1.6s linear 0.5s infinite",
        background: "linear-gradient(90deg, transparent, ".concat(theme.palette.action.hover, ", transparent)"),
        content: '""',
        position: "absolute",
        transform: "translateX(-100%)",
        // Avoid flash during server-side hydration
        bottom: 0,
        left: 0,
        right: 0,
        top: 0
      }
    },
    "@keyframes wave": {
      "0%": {
        transform: "translateX(-100%)"
      },
      "60%": {
        // +0.5s of delay between each loop
        transform: "translateX(100%)"
      },
      "100%": {
        transform: "translateX(100%)"
      }
    },
    /* Styles applied when the component is passed children. */
    withChildren: {
      "& > *": {
        visibility: "hidden"
      }
    },
    /* Styles applied when the component is passed children and no width. */
    fitContent: {
      maxWidth: "fit-content"
    },
    /* Styles applied when the component is passed children and no height. */
    heightAuto: {
      height: "auto"
    }
  };
};
var Skeleton = React.forwardRef(function Skeleton2(props, ref) {
  var _props$animation = props.animation, animation = _props$animation === void 0 ? "pulse" : _props$animation, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? "span" : _props$component, height = props.height, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, width = props.width, other = _objectWithoutProperties(props, ["animation", "classes", "className", "component", "height", "variant", "width"]);
  var hasChildren = Boolean(other.children);
  return React.createElement(Component, _extends({
    ref,
    className: clsx_m_default(classes.root, classes[variant], className, hasChildren && [classes.withChildren, !width && classes.fitContent, !height && classes.heightAuto], animation !== false && classes[animation])
  }, other, {
    style: _extends({
      width,
      height
    }, other.style)
  }));
});
true ? Skeleton.propTypes = {
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   */
  animation: import_prop_types.default.oneOf(["pulse", "wave", false]),
  /**
   * Optional children to infer width and height from.
   */
  children: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The type of content that will be rendered.
   */
  variant: import_prop_types.default.oneOf(["text", "rect", "circle"]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string])
} : void 0;
var Skeleton_default = withStyles_default(styles, {
  name: "MuiSkeleton"
})(Skeleton);
export {
  Skeleton_default as default
};
//# sourceMappingURL=@material-ui_lab_Skeleton.js.map
