import {
  ButtonBase_default
} from "./chunk-FHUW7MJR.js";
import {
  useTheme
} from "./chunk-Q3M42CHF.js";
import "./chunk-FLRKFWPG.js";
import {
  capitalize,
  createSvgIcon,
  init_utils,
  useControlled
} from "./chunk-RAI2NWYZ.js";
import {
  _objectWithoutProperties,
  _slicedToArray,
  _toConsumableArray,
  alpha,
  clsx_m_default,
  init_clsx_m,
  init_objectWithoutProperties,
  init_slicedToArray,
  init_toConsumableArray,
  withStyles_default
} from "./chunk-TDSZZKD6.js";
import "./chunk-RLN447QV.js";
import "./chunk-O3D3YOBV.js";
import {
  _extends,
  init_extends
} from "./chunk-PWHIIXOD.js";
import {
  require_prop_types
} from "./chunk-ASGZJBXS.js";
import "./chunk-VPTIPXRI.js";
import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/@material-ui/lab/esm/Pagination/Pagination.js
init_extends();
init_objectWithoutProperties();
var React6 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@material-ui/lab/esm/Pagination/usePagination.js
init_extends();
init_toConsumableArray();
init_slicedToArray();
init_objectWithoutProperties();
init_utils();
function usePagination() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _props$boundaryCount = props.boundaryCount, boundaryCount = _props$boundaryCount === void 0 ? 1 : _props$boundaryCount, _props$componentName = props.componentName, componentName = _props$componentName === void 0 ? "usePagination" : _props$componentName, _props$count = props.count, count = _props$count === void 0 ? 1 : _props$count, _props$defaultPage = props.defaultPage, defaultPage = _props$defaultPage === void 0 ? 1 : _props$defaultPage, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$hideNextButton = props.hideNextButton, hideNextButton = _props$hideNextButton === void 0 ? false : _props$hideNextButton, _props$hidePrevButton = props.hidePrevButton, hidePrevButton = _props$hidePrevButton === void 0 ? false : _props$hidePrevButton, handleChange = props.onChange, pageProp = props.page, _props$showFirstButto = props.showFirstButton, showFirstButton = _props$showFirstButto === void 0 ? false : _props$showFirstButto, _props$showLastButton = props.showLastButton, showLastButton = _props$showLastButton === void 0 ? false : _props$showLastButton, _props$siblingCount = props.siblingCount, siblingCount = _props$siblingCount === void 0 ? 1 : _props$siblingCount, other = _objectWithoutProperties(props, ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"]);
  var _useControlled = useControlled({
    controlled: pageProp,
    default: defaultPage,
    name: componentName,
    state: "page"
  }), _useControlled2 = _slicedToArray(_useControlled, 2), page = _useControlled2[0], setPageState = _useControlled2[1];
  var handleClick = function handleClick2(event, value) {
    if (!pageProp) {
      setPageState(value);
    }
    if (handleChange) {
      handleChange(event, value);
    }
  };
  var range = function range2(start, end) {
    var length = end - start + 1;
    return Array.from({
      length
    }, function(_, i) {
      return start + i;
    });
  };
  var startPages = range(1, Math.min(boundaryCount, count));
  var endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
  var siblingsStart = Math.max(
    Math.min(
      // Natural start
      page - siblingCount,
      // Lower boundary when page is high
      count - boundaryCount - siblingCount * 2 - 1
    ),
    // Greater than startPages
    boundaryCount + 2
  );
  var siblingsEnd = Math.min(
    Math.max(
      // Natural end
      page + siblingCount,
      // Upper boundary when page is low
      boundaryCount + siblingCount * 2 + 2
    ),
    // Less than endPages
    endPages[0] - 2
  );
  var itemList = [].concat(_toConsumableArray(showFirstButton ? ["first"] : []), _toConsumableArray(hidePrevButton ? [] : ["previous"]), _toConsumableArray(startPages), _toConsumableArray(siblingsStart > boundaryCount + 2 ? ["start-ellipsis"] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : []), _toConsumableArray(range(siblingsStart, siblingsEnd)), _toConsumableArray(siblingsEnd < count - boundaryCount - 1 ? ["end-ellipsis"] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : []), _toConsumableArray(endPages), _toConsumableArray(hideNextButton ? [] : ["next"]), _toConsumableArray(showLastButton ? ["last"] : []));
  var buttonPage = function buttonPage2(type) {
    switch (type) {
      case "first":
        return 1;
      case "previous":
        return page - 1;
      case "next":
        return page + 1;
      case "last":
        return count;
      default:
        return null;
    }
  };
  var items = itemList.map(function(item) {
    return typeof item === "number" ? {
      onClick: function onClick(event) {
        handleClick(event, item);
      },
      type: "page",
      page: item,
      selected: item === page,
      disabled,
      "aria-current": item === page ? "true" : void 0
    } : {
      onClick: function onClick(event) {
        handleClick(event, buttonPage(item));
      },
      type: item,
      page: buttonPage(item),
      selected: false,
      disabled: disabled || item.indexOf("ellipsis") === -1 && (item === "next" || item === "last" ? page >= count : page <= 1)
    };
  });
  return _extends({
    items
  }, other);
}

// node_modules/@material-ui/lab/esm/PaginationItem/PaginationItem.js
init_objectWithoutProperties();
init_extends();
var React5 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@material-ui/lab/esm/internal/svg-icons/FirstPage.js
var React = __toESM(require_react());
init_utils();
var FirstPage_default = createSvgIcon(React.createElement("path", {
  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
}), "FirstPage");

// node_modules/@material-ui/lab/esm/internal/svg-icons/LastPage.js
var React2 = __toESM(require_react());
init_utils();
var LastPage_default = createSvgIcon(React2.createElement("path", {
  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
}), "LastPage");

// node_modules/@material-ui/lab/esm/internal/svg-icons/NavigateBefore.js
var React3 = __toESM(require_react());
init_utils();
var NavigateBefore_default = createSvgIcon(React3.createElement("path", {
  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), "NavigateBefore");

// node_modules/@material-ui/lab/esm/internal/svg-icons/NavigateNext.js
var React4 = __toESM(require_react());
init_utils();
var NavigateNext_default = createSvgIcon(React4.createElement("path", {
  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), "NavigateNext");

// node_modules/@material-ui/lab/esm/PaginationItem/PaginationItem.js
init_utils();
var styles = function styles2(theme) {
  return {
    /* Styles applied to the root element. */
    root: _extends({}, theme.typography.body2, {
      borderRadius: 32 / 2,
      textAlign: "center",
      boxSizing: "border-box",
      minWidth: 32,
      height: 32,
      padding: "0 6px",
      margin: "0 3px",
      color: theme.palette.text.primary
    }),
    /* Styles applied to the root element if `type="page"`. */
    page: {
      transition: theme.transitions.create(["color", "background-color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": {
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      "&$focusVisible": {
        backgroundColor: theme.palette.action.focus
      },
      "&$selected": {
        backgroundColor: theme.palette.action.selected,
        "&:hover, &$focusVisible": {
          backgroundColor: alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme.palette.action.selected
          }
        },
        "&$disabled": {
          opacity: 1,
          color: theme.palette.action.disabled,
          backgroundColor: theme.palette.action.selected
        }
      },
      "&$disabled": {
        opacity: theme.palette.action.disabledOpacity
      }
    },
    /* Styles applied applied to the root element if `size="small"`. */
    sizeSmall: {
      minWidth: 26,
      height: 26,
      borderRadius: 26 / 2,
      margin: "0 1px",
      padding: "0 4px",
      "& $icon": {
        fontSize: theme.typography.pxToRem(18)
      }
    },
    /* Styles applied applied to the root element if `size="large"`. */
    sizeLarge: {
      minWidth: 40,
      height: 40,
      borderRadius: 40 / 2,
      padding: "0 10px",
      fontSize: theme.typography.pxToRem(15),
      "& $icon": {
        fontSize: theme.typography.pxToRem(22)
      }
    },
    /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
    textPrimary: {
      "&$selected": {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        "&:hover, &$focusVisible": {
          backgroundColor: theme.palette.primary.dark,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme.palette.primary.main
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }
    },
    /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
    textSecondary: {
      "&$selected": {
        color: theme.palette.secondary.contrastText,
        backgroundColor: theme.palette.secondary.main,
        "&:hover, &$focusVisible": {
          backgroundColor: theme.palette.secondary.dark,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme.palette.secondary.main
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }
    },
    /* Styles applied to the root element if `outlined="true"`. */
    outlined: {
      border: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"),
      "&$selected": {
        "&$disabled": {
          border: "1px solid ".concat(theme.palette.action.disabledBackground)
        }
      }
    },
    /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
    outlinedPrimary: {
      "&$selected": {
        color: theme.palette.primary.main,
        border: "1px solid ".concat(alpha(theme.palette.primary.main, 0.5)),
        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),
        "&:hover, &$focusVisible": {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }
    },
    /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
    outlinedSecondary: {
      "&$selected": {
        color: theme.palette.secondary.main,
        border: "1px solid ".concat(alpha(theme.palette.secondary.main, 0.5)),
        backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.activatedOpacity),
        "&:hover, &$focusVisible": {
          backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.activatedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&$disabled": {
          color: theme.palette.action.disabled
        }
      }
    },
    /* Styles applied to the root element if `rounded="true"`. */
    rounded: {
      borderRadius: theme.shape.borderRadius
    },
    /* Styles applied to the root element if `type="start-ellipsis"` or `type="end-ellipsis"`. */
    ellipsis: {
      height: "auto",
      "&$disabled": {
        opacity: theme.palette.action.disabledOpacity
      }
    },
    /* Pseudo-class applied to the root element if keyboard focused. */
    focusVisible: {},
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Pseudo-class applied to the root element if `selected={true}`. */
    selected: {},
    /* Styles applied to the icon element. */
    icon: {
      fontSize: theme.typography.pxToRem(20),
      margin: "0 -8px"
    }
  };
};
var PaginationItem = React5.forwardRef(function PaginationItem2(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "standard" : _props$color, component = props.component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, page = props.page, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, _props$shape = props.shape, shape = _props$shape === void 0 ? "round" : _props$shape, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$type = props.type, type = _props$type === void 0 ? "page" : _props$type, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disabled", "page", "selected", "shape", "size", "type", "variant"]);
  var theme = useTheme();
  var normalizedIcons = theme.direction === "rtl" ? {
    previous: NavigateNext_default,
    next: NavigateBefore_default,
    last: FirstPage_default,
    first: LastPage_default
  } : {
    previous: NavigateBefore_default,
    next: NavigateNext_default,
    first: FirstPage_default,
    last: LastPage_default
  };
  var Icon = normalizedIcons[type];
  return type === "start-ellipsis" || type === "end-ellipsis" ? React5.createElement("div", {
    ref,
    className: clsx_m_default(classes.root, classes.ellipsis, disabled && classes.disabled, size !== "medium" && classes["size".concat(capitalize(size))])
  }, "…") : React5.createElement(ButtonBase_default, _extends({
    ref,
    component,
    disabled,
    focusVisibleClassName: classes.focusVisible,
    className: clsx_m_default(classes.root, classes.page, classes[variant], classes[shape], className, color !== "standard" && classes["".concat(variant).concat(capitalize(color))], disabled && classes.disabled, selected && classes.selected, size !== "medium" && classes["size".concat(capitalize(size))])
  }, other), type === "page" && page, Icon ? React5.createElement(Icon, {
    className: classes.icon
  }) : null);
});
true ? PaginationItem.propTypes = {
  /**
   * @ignore
   */
  classes: import_prop_types.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The active color.
   */
  color: import_prop_types.default.oneOf(["standard", "primary", "secondary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the item will be disabled.
   */
  disabled: import_prop_types.default.bool,
  /**
   * The current page number.
   */
  page: import_prop_types.default.number,
  /**
   * If `true` the pagination item is selected.
   */
  selected: import_prop_types.default.bool,
  /**
   * The shape of the pagination item.
   */
  shape: import_prop_types.default.oneOf(["round", "rounded"]),
  /**
   * The size of the pagination item.
   */
  size: import_prop_types.default.oneOf(["small", "medium", "large"]),
  /**
   * The type of pagination item.
   */
  type: import_prop_types.default.oneOf(["page", "first", "last", "next", "previous", "start-ellipsis", "end-ellipsis"]),
  /**
   * The pagination item variant.
   */
  variant: import_prop_types.default.oneOf(["text", "outlined"])
} : void 0;
var PaginationItem_default = withStyles_default(styles, {
  name: "MuiPaginationItem"
})(PaginationItem);

// node_modules/@material-ui/lab/esm/Pagination/Pagination.js
var styles3 = {
  /* Styles applied to the root element. */
  root: {},
  /* Styles applied to the ul element. */
  ul: {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "center",
    padding: 0,
    margin: 0,
    listStyle: "none"
  }
};
function defaultGetAriaLabel(type, page, selected) {
  if (type === "page") {
    return "".concat(selected ? "" : "Go to ", "page ").concat(page);
  }
  return "Go to ".concat(type, " page");
}
var Pagination = React6.forwardRef(function Pagination2(props, ref) {
  var boundaryCount = props.boundaryCount, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "standard" : _props$color, count = props.count, defaultPage = props.defaultPage, disabled = props.disabled, _props$getItemAriaLab = props.getItemAriaLabel, getItemAriaLabel = _props$getItemAriaLab === void 0 ? defaultGetAriaLabel : _props$getItemAriaLab, hideNextButton = props.hideNextButton, hidePrevButton = props.hidePrevButton, onChange = props.onChange, page = props.page, _props$renderItem = props.renderItem, renderItem = _props$renderItem === void 0 ? function(item) {
    return React6.createElement(PaginationItem_default, item);
  } : _props$renderItem, _props$shape = props.shape, shape = _props$shape === void 0 ? "round" : _props$shape, showFirstButton = props.showFirstButton, showLastButton = props.showLastButton, siblingCount = props.siblingCount, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "text" : _props$variant, other = _objectWithoutProperties(props, ["boundaryCount", "classes", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"]);
  var _usePagination = usePagination(_extends({}, props, {
    componentName: "Pagination"
  })), items = _usePagination.items;
  return React6.createElement("nav", _extends({
    "aria-label": "pagination navigation",
    className: clsx_m_default(classes.root, className),
    ref
  }, other), React6.createElement("ul", {
    className: classes.ul
  }, items.map(function(item, index) {
    return React6.createElement("li", {
      key: index
    }, renderItem(_extends({}, item, {
      color,
      "aria-label": getItemAriaLabel(item.type, item.page, item.selected),
      shape,
      size,
      variant
    })));
  })));
});
true ? Pagination.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Number of always visible pages at the beginning and end.
   * @default 1
   */
  boundaryCount: import_prop_types2.default.number,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types2.default.object,
  /**
   * @ignore
   */
  className: import_prop_types2.default.string,
  /**
   * The active color.
   */
  color: import_prop_types2.default.oneOf(["primary", "secondary", "standard"]),
  /**
   * The total number of pages.
   * @default 1
   */
  count: import_prop_types2.default.number,
  /**
   * The page selected by default when the component is uncontrolled.
   * @default 1
   */
  defaultPage: import_prop_types2.default.number,
  /**
   * If `true`, the pagination component will be disabled.
   * @default false
   */
  disabled: import_prop_types2.default.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * For localization purposes, you can use the provided [translations](/guides/localization/).
   *
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @param {bool} selected If true, the current page is selected.
   * @returns {string}
   */
  getItemAriaLabel: import_prop_types2.default.func,
  /**
   * If `true`, hide the next-page button.
   * @default false
   */
  hideNextButton: import_prop_types2.default.bool,
  /**
   * If `true`, hide the previous-page button.
   * @default false
   */
  hidePrevButton: import_prop_types2.default.bool,
  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onChange: import_prop_types2.default.func,
  /**
   * The current page.
   */
  page: import_prop_types2.default.number,
  /**
   * Render the item.
   *
   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
   * @returns {ReactNode}
   */
  renderItem: import_prop_types2.default.func,
  /**
   * The shape of the pagination items.
   */
  shape: import_prop_types2.default.oneOf(["round", "rounded"]),
  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: import_prop_types2.default.bool,
  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: import_prop_types2.default.bool,
  /**
   * Number of always visible pages before and after the current page.
   * @default 1
   */
  siblingCount: import_prop_types2.default.number,
  /**
   * The size of the pagination component.
   */
  size: import_prop_types2.default.oneOf(["large", "medium", "small"]),
  /**
   * The variant to use.
   */
  variant: import_prop_types2.default.oneOf(["outlined", "text"])
} : void 0;
var Pagination_default = withStyles_default(styles3, {
  name: "MuiPagination"
})(Pagination);
export {
  Pagination_default as default,
  usePagination
};
//# sourceMappingURL=@material-ui_lab_Pagination.js.map
